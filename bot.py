"""bot.py ‚Äî Telegram‚Äë–º–µ–Ω—é + Avito‚Äë–ø–∞—Ä—Å–µ—Ä + –¶–ò–ê–ù-–ø–∞—Ä—Å–µ—Ä"""

import asyncio
import json
import os
import time
from contextlib import suppress
from dataclasses import dataclass
from typing import Any, Dict, List, Tuple

from aiogram import Bot, Dispatcher, Router, F
from aiogram.client.default import DefaultBotProperties
from aiogram.enums import ParseMode
from aiogram.filters import Command, StateFilter
from aiogram.filters.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.types import (
    Message,
    CallbackQuery,
    InlineKeyboardMarkup,
    InlineKeyboardButton,
    FSInputFile,
)
from aiogram.utils.keyboard import InlineKeyboardBuilder
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from loguru import logger
import requests

from db_service import SQLiteDBHandler
from parser_avito import AvitoParse
from parser_cian import CianParse

TOKEN = os.getenv("BOT_TOKEN")
if not TOKEN:
    raise RuntimeError("–ù—É–∂–µ–Ω BOT_TOKEN –≤ .env")

bot = Bot(token=TOKEN, default=DefaultBotProperties(parse_mode=ParseMode.HTML))
storage = MemoryStorage()
dp = Dispatcher(storage=storage)
router = Router()
dp.include_router(router)

scheduler = AsyncIOScheduler()
DB = SQLiteDBHandler()

class SearchStates(StatesGroup):
    waiting_for_urls = State()
    waiting_for_name = State()
    waiting_for_price = State()
    waiting_for_pages = State()
    waiting_for_pause = State()
    waiting_for_keywords = State()
    waiting_for_blacklist = State()
    waiting_for_proxy = State()
    waiting_for_proxy_url = State()
    waiting_for_stop_id = State()
    waiting_for_proxy_confirm = State()

@dataclass(slots=True)
class SearchJob:
    sid: int
    user_id: int
    platform: str
    urls: List[str]
    settings: Dict[str, Any]
    stop_event: asyncio.Event
    first_run: bool = True
    name: str = ""
    parser: Any = None
    total_new_ads: int = 0
    total_notified_ads: int = 0

ACTIVE: dict[int, SearchJob] = {}

def kb_main() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="üè† –ê–≤–∏—Ç–æ", callback_data="menu:avito")
    b.button(text="üèôÔ∏è –¶–ò–ê–ù", callback_data="menu:cian")
    b.button(text="üìã –ü–æ–∫–∞–∑–∞—Ç—å –ø–æ–∏—Å–∫–∏", callback_data="menu:show_searches")
    b.button(text="üîë –ü—Ä–æ–∫—Å–∏", callback_data="menu:proxy")
    b.adjust(2)
    return b.as_markup()


def kb_avito() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="avito:start")
    b.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="avito:show")
    b.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="avito:edit")
    b.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:main")
    b.adjust(1)
    return b.as_markup()


def kb_cian() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–ó–∞–ø—É—Å—Ç–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="cian:start")
    b.button(text="–ü–æ–∫–∞–∑–∞—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="cian:show")
    b.button(text="–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", callback_data="cian:edit")
    b.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:main")
    b.adjust(1)
    return b.as_markup()


def kb_edit_params_avito() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–¶–µ–Ω–∞", callback_data="edit:price")
    b.button(text="–°—Ç—Ä–∞–Ω–∏—Ü", callback_data="edit:pages")
    b.button(text="–ü–∞—É–∑–∞", callback_data="edit:pause")
    b.button(text="–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ", callback_data="edit:new")
    b.button(text="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="edit:kw")
    b.button(text="–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="edit:black")
    b.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:avito")
    b.adjust(2)
    return b.as_markup()


def kb_edit_params_cian() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–¶–µ–Ω–∞", callback_data="edit_cian:price")
    b.button(text="–°—Ç—Ä–∞–Ω–∏—Ü", callback_data="edit_cian:pages")
    b.button(text="–ü–∞—É–∑–∞", callback_data="edit_cian:pause")
    b.button(text="–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞", callback_data="edit_cian:kw")
    b.button(text="–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫", callback_data="edit_cian:black")
    b.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:cian")
    b.adjust(2)
    return b.as_markup()


def kb_yes_no() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–î–∞", callback_data="new_only:1")
    b.button(text="–ù–µ—Ç", callback_data="new_only:0")
    b.adjust(2)
    return b.as_markup()


def kb_proxy() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="proxy:add")
    b.button(text="–£–¥–∞–ª–∏—Ç—å", callback_data="proxy:del")
    b.button(text="–ü—Ä–æ–≤–µ—Ä–∏—Ç—å", callback_data="proxy:check")
    b.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:main")
    b.adjust(2)
    return b.as_markup()


def kb_confirm_proxy_delete() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–î–∞, —É–¥–∞–ª–∏—Ç—å", callback_data="proxy_confirm:yes")
    b.button(text="–û—Ç–º–µ–Ω–∞", callback_data="proxy_confirm:no")
    b.adjust(2)
    return b.as_markup()


def kb_search_list() -> InlineKeyboardMarkup:
    b = InlineKeyboardBuilder()
    b.button(text="–û—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫", callback_data="action:stop_search")
    b.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:main")
    b.adjust(1)
    return b.as_markup()

DEFAULT_AVITO = {
    "min_price": 0,
    "max_price": 9_999_999,
    "pages": 5,
    "pause": 120,
    "new_only": False,
    "keywords": [],
    "blacklist": [],
    "proxy": None,
}

DEFAULT_CIAN = {
    "min_price": 0,
    "max_price": 9_999_999,
    "pages": 5,
    "pause": 300,
    "keywords": [],
    "blacklist": [],
    "proxy": None,
}


def _parse_list(txt: str) -> List[str]:
    return [w.strip() for w in txt.split(";") if w.strip()]


def user_settings(uid: int, platform: str = "avito") -> Dict[str, Any]:
    """–ü–æ–ª—É—á–∞–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —É–∫–∞–∑–∞–Ω–Ω–æ–π –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    if platform == "avito":
        s = DEFAULT_AVITO.copy()
    else:
        s = DEFAULT_CIAN.copy()
    
    settings_prefix = f"{platform}_" if platform != "avito" else ""
    user_settings = DB.list_settings(uid)
    
    platform_settings = {}
    for key, value in user_settings.items():
        if platform == "avito" and not key.startswith("cian_"):
            platform_settings[key] = value
        elif platform != "avito" and key.startswith(settings_prefix):
            clean_key = key[len(settings_prefix):]
            platform_settings[clean_key] = value
    
    s.update(platform_settings)
    
    if "min_price" in s:
        s["min_price"] = int(s["min_price"])
    if "max_price" in s:
        s["max_price"] = int(s["max_price"])
    if "pages" in s:
        s["pages"] = int(s["pages"])
    if "pause" in s:
        s["pause"] = int(s["pause"])
    if "new_only" in s:
        s["new_only"] = bool(int(s.get("new_only", 0))) if isinstance(s.get("new_only"), str) else bool(s["new_only"])
    
    if "keywords" in s:
        s["keywords"] = _parse_list(s["keywords"]) if isinstance(s["keywords"], str) else s["keywords"]
    if "blacklist" in s:
        s["blacklist"] = _parse_list(s["blacklist"]) if isinstance(s["blacklist"], str) else s["blacklist"]
    
    return s


def save(uid: int, key: str, value: Any, platform: str = "avito"):
    """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –Ω–∞—Å—Ç—Ä–æ–π–∫—É –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö —Å —É—á–µ—Ç–æ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—ã."""
    if platform != "avito":
        key = f"{platform}_{key}"
    DB.set_setting(uid, key, str(value))

@router.message(Command("start"))
async def cmd_start(m: Message):
    await m.answer(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {m.from_user.first_name}! –ù–∞ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())

@router.callback_query(F.data == "menu:avito")
async def cb_avito_menu(cq: CallbackQuery):
    await cq.message.edit_text("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º.", reply_markup=kb_avito())
    await cq.answer()

@router.callback_query(F.data == "menu:cian")
async def cb_cian_menu(cq: CallbackQuery):
    await cq.message.edit_text("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º –¶–ò–ê–ù.", reply_markup=kb_cian())
    await cq.answer()

@router.callback_query(F.data == "menu:proxy")
async def cb_proxy(cq: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
    user_id = cq.from_user.id
    proxy = DB.get_setting(user_id, "proxy") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    proxy_change_url = DB.get_setting(user_id, "proxy_change_url") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    verified = "–î–∞" if DB.get_setting(user_id, "proxy_verified") == "1" else "–ù–µ—Ç"
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫
    proxy_text = (
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"<b>–ü—Ä–æ–∫—Å–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:</b>\n‚Ä¢ username:password@server:port\n‚Ä¢ server:port:username:password\n\n"
        f"<b>–¢–µ–∫—É—â–∏–π –ø—Ä–æ–∫—Å–∏:</b>\n{proxy}\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è IP:</b>\n{proxy_change_url}\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω:</b> {verified}"
    )
    
    await cq.message.edit_text(proxy_text, reply_markup=kb_proxy(), parse_mode="HTML")
    await cq.answer()

@router.callback_query(F.data == "menu:show_searches")
async def cb_show_searches(cq: CallbackQuery):
    rows = DB.list_active_searches(cq.from_user.id)
    if not rows:
        await cq.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    
    searches_list = []
    for row in rows:
        i, url = row[0], row[1]
        settings_json = json.loads(row[2])
        platform = settings_json.get('platform', 'avito')
        platform_icon = "üè†" if platform == "avito" else "üèôÔ∏è" if platform == "cian" else "üöÜ"
        
        name = row[3] if len(row) > 3 and row[3] else ""
        display_name = f"#{i}" if not name else f"#{i}-{name}"
        
        searches_list.append(f"{platform_icon} {display_name}: <code>{url}</code>")
    
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏:\n" + "\n".join(searches_list)
    await cq.message.edit_text(text, reply_markup=kb_search_list(), parse_mode="HTML")
    await cq.answer()

@router.callback_query(F.data == "action:stop_search")
async def cb_action_stop_search(cq: CallbackQuery, state: FSMContext):
    rows = DB.list_active_searches(cq.from_user.id)
    if not rows:
        await cq.answer("–ê–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤ –Ω–µ—Ç", show_alert=True)
        return
    
    searches_list = []
    for row in rows:
        i, url = row[0], row[1]
        settings_json = json.loads(row[2])
        platform = settings_json.get('platform', 'avito')
        platform_icon = "üè†" if platform == "avito" else "üèôÔ∏è" if platform == "cian" else "üöÜ"
        
        name = row[3] if len(row) > 3 and row[3] else ""
        display_name = f"#{i}" if not name else f"#{i}-{name}"
        
        searches_list.append(f"{platform_icon} {display_name}: <code>{url}</code>")
    
    text = "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏:\n" + "\n".join(searches_list) + "\n\n–£–∫–∞–∂–∏—Ç–µ –Ω–æ–º–µ—Ä –ø–æ–∏—Å–∫–∞, –∫–æ—Ç–æ—Ä—ã–π –Ω—É–∂–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å:"
    await cq.message.edit_text(text, parse_mode="HTML")
    await cq.answer()
    await state.set_state(SearchStates.waiting_for_stop_id)

@router.callback_query(F.data.startswith("back:"))
async def cb_back(cq: CallbackQuery):
    dest = cq.data.split(":", 1)[1]
    if dest == "main":
        await cq.message.edit_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {cq.from_user.first_name}! –ù–∞ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())
    elif dest == "avito":
        await cq.message.edit_text("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º.", reply_markup=kb_avito())
    elif dest == "cian":
        await cq.message.edit_text("–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º –¶–ò–ê–ù.", reply_markup=kb_cian())
    elif dest == "edit":
        await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    elif dest == "edit_cian":
        await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
    await cq.answer()

@router.callback_query(F.data == "avito:show")
async def cb_avito_show(cq: CallbackQuery):
    s = user_settings(cq.from_user.id, "avito")
    txt = (
        f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –ê–≤–∏—Ç–æ</b>\n"
        f"–¶–µ–Ω–∞: {s['min_price']}‚Äì{s['max_price']}\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü: {s['pages']}\n"
        f"–ü–∞—É–∑–∞: {s['pause']} —Å–µ–∫\n"
        f"–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ: {'–î–∞' if s['new_only'] else '–ù–µ—Ç'}\n"
        f"KW: {', '.join(s['keywords']) or '-'}\n"
        f"BL: {', '.join(s['blacklist']) or '-'}"
    )
    await cq.message.edit_text(txt, reply_markup=kb_avito())
    await cq.answer()

@router.callback_query(F.data == "avito:start")
async def cb_avito_start(cq: CallbackQuery, state: FSMContext):
    await state.update_data(platform="avito")
    await cq.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
    await state.set_state(SearchStates.waiting_for_urls)
    await cq.answer()

@router.callback_query(F.data == "avito:edit")
async def cb_avito_edit(cq: CallbackQuery):
    await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    await cq.answer()

@router.callback_query(F.data == "cian:show")
async def cb_cian_show(cq: CallbackQuery):
    s = user_settings(cq.from_user.id, "cian")
    txt = (
        f"<b>–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù</b>\n"
        f"–¶–µ–Ω–∞: {s['min_price']}‚Äì{s['max_price']}\n"
        f"–°—Ç—Ä–∞–Ω–∏—Ü: {s['pages']}\n"
        f"–ü–∞—É–∑–∞: {s['pause']} —Å–µ–∫\n"
        f"KW: {', '.join(s['keywords']) or '-'}\n"
        f"BL: {', '.join(s['blacklist']) or '-'}"
    )
    await cq.message.edit_text(txt, reply_markup=kb_cian())
    await cq.answer()

@router.callback_query(F.data == "cian:start")
async def cb_cian_start(cq: CallbackQuery, state: FSMContext):
    await state.update_data(platform="cian")
    await cq.message.edit_text("–ü—Ä–∏—à–ª–∏—Ç–µ —Å—Å—ã–ª–∫—É –Ω–∞ –ø–æ–∏—Å–∫ –¶–ò–ê–ù (–∏–ª–∏ –Ω–µ—Å–∫–æ–ª—å–∫–æ —á–µ—Ä–µ–∑ –ø—Ä–æ–±–µ–ª)")
    await state.set_state(SearchStates.waiting_for_urls)
    await cq.answer()

@router.callback_query(F.data == "cian:edit")
async def cb_cian_edit(cq: CallbackQuery):
    await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
    await cq.answer()

@router.message(StateFilter(SearchStates.waiting_for_urls))
async def handle_urls(message: Message, state: FSMContext):
    urls = message.text.split()
    if not urls:
        await message.reply("–í—ã –Ω–µ —É–∫–∞–∑–∞–ª–∏ –Ω–∏ –æ–¥–Ω–æ–π —Å—Å—ã–ª–∫–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Å—Å—ã–ª–∫–∏ –¥–ª—è –ø–æ–∏—Å–∫–∞.")
        return
    
    data = await state.get_data()
    platform = data.get("platform", "avito")
    
    await state.update_data(urls=urls)
    await message.reply("–£–∫–∞–∂–∏—Ç–µ –∏–º—è –¥–ª—è –ø–æ–∏—Å–∫–∞ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ –ø—É—Å—Ç–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –∏–º–µ–Ω–∏:")
    await state.set_state(SearchStates.waiting_for_name)

@router.message(StateFilter(SearchStates.waiting_for_name))
async def handle_search_name(message: Message, state: FSMContext):
    name = message.text.strip()
    data = await state.get_data()
    urls = data.get("urls", [])
    platform = data.get("platform", "avito")
    
    if not urls:
        await message.reply("–û—à–∏–±–∫–∞: —Å—Å—ã–ª–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ –∑–∞–Ω–æ–≤–æ.")
        await state.clear()
        
        if platform == "cian":
            await bot.send_message(message.chat.id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º –¶–ò–ê–ù.", reply_markup=kb_cian())
        else:
            await bot.send_message(message.chat.id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º.", reply_markup=kb_avito())
        return
    
    st = user_settings(message.from_user.id, platform)
    sid = DB.add_search(message.from_user.id, platform, urls, st, name)
    ev = asyncio.Event()
    
    job = SearchJob(sid, message.from_user.id, platform, urls, st, ev, first_run=True, name=name)
    ACTIVE[sid] = job
    
    platform_name = "–¶–ò–ê–ù" if platform == "cian" else "–ê–≤–∏—Ç–æ"
    await message.reply(f"–ó–∞–ø—É—Å–∫–∞—é –ø–æ–∏—Å–∫ {platform_name} #{sid}{'-'+name if name else ''}...")
    
    if platform == "cian":
        await run_cian(job)
    else:
        await run_avito(job)
    
    job.first_run = False
    
    interval_seconds = st["pause"]
    
    if platform == "cian":
        scheduler.add_job(run_cian, "interval", seconds=interval_seconds, args=[job], id=str(sid))
    else:
        scheduler.add_job(run_avito, "interval", seconds=interval_seconds, args=[job], id=str(sid))
    
    display_name = f"–ü–æ–∏—Å–∫ {platform_name} #{sid}" if not name else f"–ü–æ–∏—Å–∫ {platform_name} #{sid}-{name}"
    await message.reply(f"{display_name} –∑–∞–ø—É—â–µ–Ω.\n–ü–µ—Ä–≤–∏—á–Ω–æ–µ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ. –¢–µ–ø–µ—Ä—å –±—É–¥—É—Ç –ø—Ä–∏—Ö–æ–¥–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è —Ç–æ–ª—å–∫–æ –æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏—è—Ö.")
    await state.clear()
    
    if platform == "cian":
        await bot.send_message(message.chat.id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º –¶–ò–ê–ù.", reply_markup=kb_cian())
    else:
        await bot.send_message(message.chat.id, "–ù–µ –∑–∞–±—É–¥—å—Ç–µ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–µ—Ä–µ–¥ –Ω–æ–≤—ã–º –ø–æ–∏—Å–∫–æ–º.", reply_markup=kb_avito())

@router.callback_query(F.data.startswith("edit:"))
async def cb_edit_param(cq: CallbackQuery, state: FSMContext):
    param = cq.data.split(":", 1)[1]
    
    if param == "new":
        await cq.message.edit_text("–ü–æ–∫–∞–∑—ã–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è?", reply_markup=kb_yes_no())
        await cq.answer()
        return
    
    if param == "kw":
        s = user_settings(cq.from_user.id)
        current_kw = ", ".join(s["keywords"]) if s["keywords"] else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
        
        kb = InlineKeyboardBuilder()
        kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="kw:edit")
        kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å", callback_data="kw:clear")
        kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit")
        kb.adjust(2)
        
        await cq.message.edit_text(f"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞</b>\n–¢–µ–∫—É—â–∏–µ: {current_kw}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())
        await cq.answer()
        return
    
    if param == "black":
        s = user_settings(cq.from_user.id)
        current_bl = ", ".join(s["blacklist"]) if s["blacklist"] else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
        
        kb = InlineKeyboardBuilder()
        kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="black:edit")
        kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å", callback_data="black:clear")
        kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit")
        kb.adjust(2)
        
        await cq.message.edit_text(f"<b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫</b>\n–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞: {current_bl}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())
        await cq.answer()
        return
    
    prompts = {
        "price": ("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –º–∏–Ω.—Ü–µ–Ω–∞; –º–∞–∫—Å.—Ü–µ–Ω–∞ (–ü—Ä–∏–º–µ—Ä: 1000; 5000)", SearchStates.waiting_for_price),
        "pages": ("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", SearchStates.waiting_for_pages),
        "pause": ("–í–≤–µ–¥–∏—Ç–µ –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:", SearchStates.waiting_for_pause),
    }
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit")
    
    prompt_text, next_state = prompts.get(param, ("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", None))
    if next_state:
        await state.update_data(edit_param=param, platform="avito")
        await state.set_state(next_state)
        await cq.message.edit_text(prompt_text, reply_markup=kb.as_markup())
        await cq.answer()

@router.callback_query(F.data.startswith("edit_cian:"))
async def cb_edit_param_cian(cq: CallbackQuery, state: FSMContext):
    param = cq.data.split(":", 1)[1]
    
    if param == "kw":
        s = user_settings(cq.from_user.id, "cian")
        current_kw = ", ".join(s["keywords"]) if s["keywords"] else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
        
        kb = InlineKeyboardBuilder()
        kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="kw_cian:edit")
        kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å", callback_data="kw_cian:clear")
        kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit_cian")
        kb.adjust(2)
        
        await cq.message.edit_text(f"<b>–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ (–¶–ò–ê–ù)</b>\n–¢–µ–∫—É—â–∏–µ: {current_kw}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())
        await cq.answer()
        return
    
    if param == "black":
        s = user_settings(cq.from_user.id, "cian")
        current_bl = ", ".join(s["blacklist"]) if s["blacklist"] else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
        
        kb = InlineKeyboardBuilder()
        kb.button(text="–ò–∑–º–µ–Ω–∏—Ç—å", callback_data="black_cian:edit")
        kb.button(text="–û—á–∏—Å—Ç–∏—Ç—å", callback_data="black_cian:clear")
        kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit_cian")
        kb.adjust(2)
        
        await cq.message.edit_text(f"<b>–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ (–¶–ò–ê–ù)</b>\n–¢–µ–∫—É—â–∏–µ —Å–ª–æ–≤–∞: {current_bl}\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=kb.as_markup())
        await cq.answer()
        return
    
    prompts = {
        "price": ("–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É –≤ —Ñ–æ—Ä–º–∞—Ç–µ: –º–∏–Ω.—Ü–µ–Ω–∞; –º–∞–∫—Å.—Ü–µ–Ω–∞ (–ü—Ä–∏–º–µ—Ä: 1000; 5000)", SearchStates.waiting_for_price),
        "pages": ("–í–≤–µ–¥–∏—Ç–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–ª—è —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", SearchStates.waiting_for_pages),
        "pause": ("–í–≤–µ–¥–∏—Ç–µ –ø–∞—É–∑—É –º–µ–∂–¥—É —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è–º–∏ –≤ —Å–µ–∫—É–Ω–¥–∞—Ö:", SearchStates.waiting_for_pause),
    }
    
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit_cian")
    
    prompt_text, next_state = prompts.get(param, ("–í–≤–µ–¥–∏—Ç–µ –∑–Ω–∞—á–µ–Ω–∏–µ:", None))
    if next_state:
        await state.update_data(edit_param=param, platform="cian")
        await state.set_state(next_state)
        await cq.message.edit_text(prompt_text, reply_markup=kb.as_markup())
        await cq.answer()

@router.callback_query(F.data == "kw_cian:clear")
async def cb_kw_cian_clear(cq: CallbackQuery):
    save(cq.from_user.id, "keywords", "", platform="cian")
    await cq.message.edit_text("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –¶–ò–ê–ù –æ—á–∏—â–µ–Ω—ã!")
    await asyncio.sleep(1)
    await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
    await cq.answer()

@router.callback_query(F.data == "kw_cian:edit")
async def cb_kw_cian_edit(cq: CallbackQuery, state: FSMContext):
    await state.update_data(platform="cian")
    await state.set_state(SearchStates.waiting_for_keywords)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit_cian")
    await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;):", reply_markup=kb.as_markup())
    await cq.answer()

@router.callback_query(F.data == "black_cian:clear")
async def cb_black_cian_clear(cq: CallbackQuery):
    save(cq.from_user.id, "blacklist", "", platform="cian")
    await cq.message.edit_text("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –¶–ò–ê–ù –æ—á–∏—â–µ–Ω!")
    await asyncio.sleep(1)
    await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
    await cq.answer()

@router.callback_query(F.data == "black_cian:edit")
async def cb_black_cian_edit(cq: CallbackQuery, state: FSMContext):
    await state.update_data(platform="cian")
    await state.set_state(SearchStates.waiting_for_blacklist)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit_cian")
    await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;):", reply_markup=kb.as_markup())
    await cq.answer()

@router.callback_query(F.data == "kw:clear")
async def cb_kw_clear(cq: CallbackQuery):
    save(cq.from_user.id, "keywords", "")
    await cq.message.edit_text("–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ –æ—á–∏—â–µ–Ω—ã!")
    await asyncio.sleep(1)
    await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    await cq.answer()

@router.callback_query(F.data == "kw:edit")
async def cb_kw_edit(cq: CallbackQuery, state: FSMContext):
    await state.update_data(platform="avito")
    await state.set_state(SearchStates.waiting_for_keywords)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit")
    await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;):", reply_markup=kb.as_markup())
    await cq.answer()

@router.callback_query(F.data == "black:clear")
async def cb_black_clear(cq: CallbackQuery):
    save(cq.from_user.id, "blacklist", "")
    await cq.message.edit_text("–ß–µ—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫ –æ—á–∏—â–µ–Ω!")
    await asyncio.sleep(1)
    await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    await cq.answer()

@router.callback_query(F.data == "black:edit")
async def cb_black_edit(cq: CallbackQuery, state: FSMContext):
    await state.update_data(platform="avito")
    await state.set_state(SearchStates.waiting_for_blacklist)
    kb = InlineKeyboardBuilder()
    kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data="back:edit")
    await cq.message.edit_text("–í–≤–µ–¥–∏—Ç–µ —Å–ª–æ–≤–∞ –¥–ª—è —á–µ—Ä–Ω–æ–≥–æ —Å–ø–∏—Å–∫–∞ —á–µ—Ä–µ–∑ —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π (;):", reply_markup=kb.as_markup())
    await cq.answer()

@router.callback_query(F.data.startswith("new_only:"))
async def cb_new_only(cq: CallbackQuery):
    value = int(cq.data.split(":", 1)[1])
    save(cq.from_user.id, "new_only", value)
    
    if value:
        await cq.message.edit_text("‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ!</b> –î–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ñ—É–Ω–∫—Ü–∏–∏ '–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ' –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å –ø—Ä–æ–∫—Å–∏ –≤ –≥–ª–∞–≤–Ω–æ–º –º–µ–Ω—é.\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä '–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: –î–∞\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    else:
        await cq.message.edit_text(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '–¢–æ–ª—å–∫–æ –Ω–æ–≤—ã–µ' —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞: –ù–µ—Ç\n\n–ü–∞—Ä–∞–º–µ—Ç—Ä—ã —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã!")
    
    await asyncio.sleep(3)
    await cq.message.edit_text("–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    await cq.answer()

@router.message(StateFilter(SearchStates.waiting_for_price))
async def handle_price(message: Message, state: FSMContext):
    txt = message.text.strip()
    data = await state.get_data()
    platform = data.get("platform", "avito")
    back_command = "back:edit_cian" if platform == "cian" else "back:edit"
    
    try:
        parts = txt.replace(";", " ").split()
        if len(parts) != 2:
            kb = InlineKeyboardBuilder()
            kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data=back_command)
            await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ –¥–≤–∞ —á–∏—Å–ª–∞, —Ä–∞–∑–¥–µ–ª–µ–Ω–Ω—ã—Ö —Ç–æ—á–∫–æ–π —Å –∑–∞–ø—è—Ç–æ–π (;). –ü—Ä–∏–º–µ—Ä: 1000; 5000", reply_markup=kb.as_markup())
            return
        
        mn, mx = map(int, parts)
        save(message.from_user.id, "min_price", mn, platform)
        save(message.from_user.id, "max_price", mx, platform)
        await message.reply(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '–¶–µ–Ω–∞' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {mn}‚Äì{mx}‚ÇΩ")
        await state.clear()
        
        if platform == "cian":
            await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
        else:
            await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    except ValueError:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data=back_command)
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –≤–≤–µ—Å—Ç–∏ —á–∏—Å–ª–∞. –ü—Ä–∏–º–µ—Ä: 1000; 5000", reply_markup=kb.as_markup())

@router.message(StateFilter(SearchStates.waiting_for_pages))
async def handle_pages(message: Message, state: FSMContext):
    txt = message.text.strip()
    data = await state.get_data()
    platform = data.get("platform", "avito")
    back_command = "back:edit_cian" if platform == "cian" else "back:edit"
    
    try:
        pages = int(txt)
        if pages < 1:
            kb = InlineKeyboardBuilder()
            kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data=back_command)
            await message.reply("–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü –¥–æ–ª–∂–Ω–æ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=kb.as_markup())
            return
        save(message.from_user.id, "pages", pages, platform)
        await message.reply(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '–°—Ç—Ä–∞–Ω–∏—Ü—ã' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {pages}")
        await state.clear()
        
        if platform == "cian":
            await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
        else:
            await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    except ValueError:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data=back_command)
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ.", reply_markup=kb.as_markup())

@router.message(StateFilter(SearchStates.waiting_for_pause))
async def handle_pause(message: Message, state: FSMContext):
    txt = message.text.strip()
    data = await state.get_data()
    platform = data.get("platform", "avito")
    back_command = "back:edit_cian" if platform == "cian" else "back:edit"
    
    try:
        pause = int(txt)
        if pause < 1:  # –£–±–∏—Ä–∞–µ–º –º–∏–Ω–∏–º–∞–ª—å–Ω–æ–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ, –±—ã–ª–æ: if pause < 10
            kb = InlineKeyboardBuilder()
            kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data=back_command)
            await message.reply("–ü–∞—É–∑–∞ –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—ã–º —á–∏—Å–ª–æ–º.", reply_markup=kb.as_markup())
            return
        save(message.from_user.id, "pause", pause, platform)
        await message.reply(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '–ü–∞—É–∑–∞' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {pause} —Å–µ–∫")
        await state.clear()
        
        if platform == "cian":
            await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
        else:
            await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())
    except ValueError:
        kb = InlineKeyboardBuilder()
        kb.button(text="‚¨ÖÔ∏é –ù–∞–∑–∞–¥", callback_data=back_command)
        await message.reply("–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —Ü–µ–ª–æ–µ —á–∏—Å–ª–æ —Å–µ–∫—É–Ω–¥.", reply_markup=kb.as_markup())

@router.message(StateFilter(SearchStates.waiting_for_keywords))
async def handle_keywords(message: Message, state: FSMContext):
    txt = message.text.strip()
    data = await state.get_data()
    platform = data.get("platform", "avito")
    
    keywords = _parse_list(txt)
    save(message.from_user.id, "keywords", txt, platform)
    keyword_list = ", ".join(keywords) if keywords else "—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    await message.reply(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '–ö–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {keyword_list}")
    await state.clear()
    
    if platform == "cian":
        await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
    else:
        await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())

@router.message(StateFilter(SearchStates.waiting_for_blacklist))
async def handle_blacklist(message: Message, state: FSMContext):
    txt = message.text.strip()
    data = await state.get_data()
    platform = data.get("platform", "avito")
    
    blacklist = _parse_list(txt)
    save(message.from_user.id, "blacklist", txt, platform)
    blacklist_items = ", ".join(blacklist) if blacklist else "—Å–ø–∏—Å–æ–∫ –ø—É—Å—Ç"
    await message.reply(f"–ü–∞—Ä–∞–º–µ—Ç—Ä '–ß—ë—Ä–Ω—ã–π —Å–ø–∏—Å–æ–∫' —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω: {blacklist_items}")
    await state.clear()
    
    if platform == "cian":
        await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¶–ò–ê–ù", reply_markup=kb_edit_params_cian())
    else:
        await bot.send_message(message.chat.id, "–ò–∑–º–µ–Ω–∏—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã", reply_markup=kb_edit_params_avito())

@router.callback_query(F.data == "proxy:add")
async def cb_proxy_add(cq: CallbackQuery, state: FSMContext):
    rows = DB.list_active_searches(cq.from_user.id)
    active_searches_text = ""
    
    if rows:
        searches_list = []
        for row in rows:
            i, url = row[0], row[1]
            settings_json = json.loads(row[2])
            platform = settings_json.get('platform', 'avito')
            name = row[3] if len(row) > 3 and row[3] else ""
            display_name = f"#{i}" if not name else f"#{i}-{name}"
            searches_list.append(f"{display_name}")
        
        active_searches_text = "\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–æ–≤—ã–π –ø—Ä–æ–∫—Å–∏:</b>\n" + ", ".join(searches_list)
    
    text = (
        "–®–∞–≥ 1 –∏–∑ 2: –í–≤–µ–¥–∏—Ç–µ –ø—Ä–æ–∫—Å–∏ –≤ –æ–¥–Ω–æ–º –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n\n"
        "- username:password@server:port\n"
        "- host:port:username:password\n\n"
        f"{active_searches_text}"
    )
    await cq.message.edit_text(text, parse_mode="HTML")
    await state.set_state(SearchStates.waiting_for_proxy)
    await cq.answer()

@router.message(StateFilter(SearchStates.waiting_for_proxy))
async def handle_proxy(message: Message, state: FSMContext):
    proxy_text = message.text.strip()
    user_id = message.from_user.id
    
    await state.update_data(proxy=proxy_text)
    
    text = (
        "–®–∞–≥ 2 –∏–∑ 2: –í–≤–µ–¥–∏—Ç–µ —Å—Å—ã–ª–∫—É –¥–ª—è —Å–º–µ–Ω—ã IP, –Ω–∞–ø—Ä–∏–º–µ—Ä:\n\n"
        "https://changeip.mobileproxy.space/?proxy_key=***\n\n"
        "–ò–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ '–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å', –µ—Å–ª–∏ –Ω–µ –∏—Å–ø–æ–ª—å–∑—É–µ—Ç–µ —Å–º–µ–Ω—É IP."
    )
    await message.reply(text)
    
    await state.set_state(SearchStates.waiting_for_proxy_url)

@router.message(StateFilter(SearchStates.waiting_for_proxy_url))
async def handle_proxy_url(message: Message, state: FSMContext):
    proxy_url = message.text.strip()
    user_id = message.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ–∫—Å–∏ –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    data = await state.get_data()
    proxy_text = data.get("proxy", "")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ —Ö–æ—á–µ—Ç –ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å —ç—Ç–æ—Ç —à–∞–≥
    if proxy_url.lower() in ["–ø—Ä–æ–ø—É—Å—Ç–∏—Ç—å", "skip", "-"]:
        proxy_url = ""
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    DB.set_setting(user_id, "proxy", proxy_text)
    DB.set_setting(user_id, "proxy_change_url", proxy_url)
    
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø—Ä–æ–∫—Å–∏ –ø—Ä–∏ –µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏–∏
    DB.set_setting(user_id, "proxy_verified", "0")
    
    # –û–±–Ω–æ–≤–ª—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–∏—Å–∫–æ–≤
    for job_id, job in ACTIVE.items():
        if job.user_id == user_id:
            job.settings["proxy"] = proxy_text
            job.settings["proxy_change_url"] = proxy_url
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–ª—è –≤—Å–µ—Ö –ø–ª–∞—Ç—Ñ–æ—Ä–º
    DB.set_setting(user_id, "cian_proxy", proxy_text)
    
    # –£–≤–µ–¥–æ–º–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏
    await message.reply("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —É—Å–ø–µ—à–Ω–æ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã.")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
    proxy = DB.get_setting(user_id, "proxy") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    proxy_change_url = DB.get_setting(user_id, "proxy_change_url") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    verified = "–î–∞" if DB.get_setting(user_id, "proxy_verified") == "1" else "–ù–µ—Ç"
    
    proxy_text = (
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"<b>–ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:password@server:port:</b>\n{proxy}\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è IP, –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://changeip.mobileproxy.space/?proxy_key=***:</b>\n{proxy_change_url}\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω:</b> {verified}"
    )
    
    await message.answer(proxy_text, reply_markup=kb_proxy(), parse_mode="HTML")
    
    # –û—á–∏—â–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    await state.clear()

async def verify_proxy(user_id: int, message_obj) -> None:
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç—É –ø—Ä–æ–∫—Å–∏ –∏ —Å–º–µ–Ω—É IP
    message_obj: –º–æ–∂–µ—Ç –±—ã—Ç—å –æ–±—ä–µ–∫—Ç–æ–º —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ –∑–∞–ø—Ä–æ—Å–æ–º callback
    """
    proxy = DB.get_setting(user_id, "proxy") or ""
    proxy_url = DB.get_setting(user_id, "proxy_change_url") or ""
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ª–∏ –ø—Ä–æ–∫—Å–∏
    if not proxy:
        if hasattr(message_obj, 'message'):
            await message_obj.message.edit_text("–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏.")
        else:
            await bot.send_message(message_obj.chat.id, "–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω. –°–Ω–∞—á–∞–ª–∞ –¥–æ–±–∞–≤—å—Ç–µ –ø—Ä–æ–∫—Å–∏.")
        return
    
    # –°–æ–∑–¥–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –ø—Ä–æ–≤–µ—Ä–∫–∏
    if hasattr(message_obj, 'message'):
        status_message = await message_obj.message.edit_text("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...\n\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ IP...")
    else:
        status_message = await bot.send_message(message_obj.chat.id, "üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...\n\n–ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ IP...")
    
    try:
        # –°–æ–∑–¥–∞–µ–º —Å–µ—Å—Å–∏—é —Å –ø—Ä–æ–∫—Å–∏
        session = requests.Session()
        if ":" in proxy and "@" in proxy:
            # –§–æ—Ä–º–∞—Ç username:password@server:port
            proxies = {
                "http": f"http://{proxy}",
                "https": f"http://{proxy}"
            }
        elif proxy.count(":") == 3:
            # –§–æ—Ä–º–∞—Ç host:port:username:password
            parts = proxy.split(":")
            if len(parts) == 4:
                host, port, username, password = parts
                formatted_proxy = f"{username}:{password}@{host}:{port}"
                proxies = {
                    "http": f"http://{formatted_proxy}",
                    "https": f"http://{formatted_proxy}"
                }
        else:
            await status_message.edit_text("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –ø—Ä–æ–∫—Å–∏. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –æ–¥–∏–Ω –∏–∑ —Ñ–æ—Ä–º–∞—Ç–æ–≤:\n"
                                         "‚Ä¢ username:password@server:port\n"
                                         "‚Ä¢ server:port:username:password")
            return
        
        session.proxies.update(proxies)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ö–æ–¥–Ω—ã–π IP
        try:
            start_time = time.time()
            original_ip_response = session.get("https://api.ipify.org", timeout=15)
            if original_ip_response.status_code != 200:
                await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏—Å—Ö–æ–¥–Ω—ã–π IP. "
                                            f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {original_ip_response.status_code}")
                return
                
            original_ip = original_ip_response.text
            await status_message.edit_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...\n\n–¢–µ–∫—É—â–∏–π IP: {original_ip}\n\n"
                                        f"–í—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–º–µ–Ω–∞ IP...")
            
            # –ï—Å–ª–∏ URL –¥–ª—è —Å–º–µ–Ω—ã IP –Ω–µ —É–∫–∞–∑–∞–Ω
            if not proxy_url:
                await status_message.edit_text(f"‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç, –Ω–æ URL –¥–ª—è —Å–º–µ–Ω—ã IP –Ω–µ —É–∫–∞–∑–∞–Ω.\n\n"
                                            f"IP: {original_ip}\n\n"
                                            f"–î–ª—è –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å URL —Å–º–µ–Ω—ã IP.")
                return
                
            # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–ª—è —Å–º–µ–Ω—ã IP
            try:
                change_ip_response = requests.get(proxy_url, timeout=15)
                if change_ip_response.status_code != 200:
                    await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å IP. "
                                                f"–ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {change_ip_response.status_code}\n"
                                                f"–¢–µ–∫—É—â–∏–π IP: {original_ip}")
                    return
                
                # –û–±–Ω–æ–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å —Ç–∞–π–º–µ—Ä–æ–º
                await status_message.edit_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...\n\n"
                                            f"–ò—Å—Ö–æ–¥–Ω—ã–π IP: {original_ip}\n\n"
                                            f"–í—ã–ø–æ–ª–Ω–µ–Ω–∞ –æ—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ —Å–º–µ–Ω—É IP.\n"
                                            f"–û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–µ—Å—Å–∏–∏... (0:00)")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π IP —Å —Ç–∞–π–º–∞—É—Ç–æ–º –≤ 1 –º–∏–Ω—É—Ç—É
                timeout_time = start_time + 60
                new_ip = original_ip
                attempts = 0
                
                # –¶–∏–∫–ª –æ–∂–∏–¥–∞–Ω–∏—è —Å–º–µ–Ω—ã IP
                while new_ip == original_ip and time.time() < timeout_time:
                    elapsed = int(time.time() - start_time)
                    mins = elapsed // 60
                    secs = elapsed % 60
                    timer = f"{mins}:{secs:02d}"
                    
                    await status_message.edit_text(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏...\n\n"
                                                f"–ò—Å—Ö–æ–¥–Ω—ã–π IP: {original_ip}\n\n"
                                                f"–û–∂–∏–¥–∞–Ω–∏–µ —Å–º–µ–Ω—ã IP... ({timer})")
                    
                    # –ü–∞—É–∑–∞ –º–µ–∂–¥—É –ø—Ä–æ–≤–µ—Ä–∫–∞–º–∏
                    await asyncio.sleep(5)
                    
                    try:
                        new_ip_response = session.get("https://api.ipify.org", timeout=10)
                        if new_ip_response.status_code == 200:
                            new_ip = new_ip_response.text
                            if new_ip != original_ip:
                                break
                        attempts += 1
                    except Exception as e:
                        attempts += 1
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –Ω–æ–≤–æ–≥–æ IP: {e}")
                        continue
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç —Å–º–µ–Ω—ã IP
                elapsed_time = time.time() - start_time
                
                if new_ip != original_ip:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                    DB.set_setting(user_id, "proxy_verified", "1")
                    DB.set_setting(user_id, "proxy_last_check", str(int(time.time())))
                    
                    await status_message.edit_text(f"‚úÖ –ü—Ä–æ–∫—Å–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç! IP —É—Å–ø–µ—à–Ω–æ –∏–∑–º–µ–Ω–µ–Ω.\n\n"
                                                f"–ò—Å—Ö–æ–¥–Ω—ã–π IP: {original_ip}\n"
                                                f"–ù–æ–≤—ã–π IP: {new_ip}\n"
                                                f"–í—Ä–µ–º—è —Å–º–µ–Ω—ã: {elapsed_time:.1f} —Å–µ–∫.")
                else:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ—É—Å–ø–µ—à–Ω–æ–π –ø—Ä–æ–≤–µ—Ä–∫–µ
                    DB.set_setting(user_id, "proxy_verified", "0")
                    
                    await status_message.edit_text(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–º–µ–Ω–∏—Ç—å IP –≤ —Ç–µ—á–µ–Ω–∏–µ 1 –º–∏–Ω—É—Ç—ã.\n\n"
                                                f"–ò—Å—Ö–æ–¥–Ω—ã–π IP: {original_ip}\n\n"
                                                f"–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å URL –¥–ª—è —Å–º–µ–Ω—ã IP.")
            except Exception as e:
                await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–º–µ–Ω–µ IP: {str(e)}\n\n"
                                            f"–¢–µ–∫—É—â–∏–π IP: {original_ip}")
        except requests.RequestException as e:
            await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ IP: {str(e)}")
            
    except Exception as e:
        await status_message.edit_text(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–æ–∫—Å–∏: {str(e)}")

@router.callback_query(F.data == "proxy:check")
async def cb_proxy_check(cq: CallbackQuery):
    await verify_proxy(cq.from_user.id, cq)
    await cq.answer()

@router.callback_query(F.data == "proxy:verify_now")
async def cb_proxy_verify_now(cq: CallbackQuery):
    await verify_proxy(cq.from_user.id, cq)
    await cq.answer()

@router.callback_query(F.data == "proxy:verify_later")
async def cb_proxy_verify_later(cq: CallbackQuery):
    # –ü—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏
    proxy = DB.get_setting(cq.from_user.id, "proxy") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    proxy_change_url = DB.get_setting(cq.from_user.id, "proxy_change_url") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    verified = "–î–∞" if DB.get_setting(cq.from_user.id, "proxy_verified") == "1" else "–ù–µ—Ç"
    
    proxy_text = (
        "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"<b>–ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:password@server:port:</b>\n{proxy}\n\n"
        f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è IP, –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://changeip.mobileproxy.space/?proxy_key=***:</b>\n{proxy_change_url}\n\n"
        f"<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω:</b> {verified}"
    )
    
    await cq.message.edit_text(proxy_text, reply_markup=kb_proxy(), parse_mode="HTML")
    await cq.answer()

@router.callback_query(F.data == "proxy:del")
async def cb_proxy_del(cq: CallbackQuery, state: FSMContext):
    user_id = cq.from_user.id
    proxy = DB.get_setting(user_id, "proxy") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    proxy_change_url = DB.get_setting(user_id, "proxy_change_url") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
    
    if proxy == "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ" and proxy_change_url == "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ":
        await cq.answer("–ü—Ä–æ–∫—Å–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã, –Ω–µ—á–µ–≥–æ —É–¥–∞–ª—è—Ç—å", show_alert=True)
        return
    
    rows = DB.list_active_searches(user_id)
    active_searches_text = ""
    
    if rows:
        searches_list = []
        for row in rows:
            i, url = row[0], row[1]
            settings_json = json.loads(row[2])
            platform = settings_json.get('platform', 'avito')
            name = row[3] if len(row) > 3 and row[3] else ""
            display_name = f"#{i}" if not name else f"#{i}-{name}"
            searches_list.append(f"{display_name}")
        
        active_searches_text = "\n\n<b>–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –±–µ–∑ –ø—Ä–æ–∫—Å–∏:</b>\n" + ", ".join(searches_list)
    
    text = (
        "<b>–£–¥–∞–ª–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –ø—Ä–æ–∫—Å–∏</b>\n\n"
        f"<b>–ü—Ä–æ–∫—Å–∏:</b> {proxy}\n"
        f"<b>–°—Å—ã–ª–∫–∞ API:</b> {proxy_change_url}"
        f"{active_searches_text}\n\n"
        "–í—ã –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —Ö–æ—Ç–∏—Ç–µ —É–¥–∞–ª–∏—Ç—å –≤—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏?"
    )
    
    await cq.message.edit_text(text, reply_markup=kb_confirm_proxy_delete(), parse_mode="HTML")
    await state.set_state(SearchStates.waiting_for_proxy_confirm)
    await cq.answer()

@router.callback_query(F.data.startswith("proxy_confirm:"))
async def cb_proxy_confirm(cq: CallbackQuery, state: FSMContext):
    action = cq.data.split(":", 1)[1]
    user_id = cq.from_user.id
    
    if action == "yes":
        DB.delete_setting(user_id, "proxy")
        DB.delete_setting(user_id, "cian_proxy")
        DB.delete_setting(user_id, "proxy_change_url")
        DB.delete_setting(user_id, "proxy_verified")
        
        for job_id, job in ACTIVE.items():
            if job.user_id == user_id:
                job.settings["proxy"] = None
                job.settings["proxy_change_url"] = None
        
        await cq.message.edit_text("–í—Å–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏ —É–¥–∞–ª–µ–Ω—ã. –ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–∏—Å–∫–∏ —Ç–µ–ø–µ—Ä—å —Ä–∞–±–æ—Ç–∞—é—Ç –±–µ–∑ –ø—Ä–æ–∫—Å–∏.")
        await asyncio.sleep(2)
        
        await cq.message.edit_text(f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {cq.from_user.first_name}! –ù–∞ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())
    else:
        proxy = DB.get_setting(user_id, "proxy") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        proxy_change_url = DB.get_setting(user_id, "proxy_change_url") or "–ù–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ"
        verified = "–î–∞" if DB.get_setting(user_id, "proxy_verified") == "1" else "–ù–µ—Ç"
        
        proxy_text = (
            "<b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –ø—Ä–æ–∫—Å–∏</b>\n\n"
            f"<b>–ü—Ä–æ–∫—Å–∏ –≤ —Ñ–æ—Ä–º–∞—Ç–µ username:password@server:port:</b>\n{proxy}\n\n"
            f"<b>–°—Å—ã–ª–∫–∞ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è IP, –≤ —Ñ–æ—Ä–º–∞—Ç–µ https://changeip.mobileproxy.space/?proxy_key=***:</b>\n{proxy_change_url}\n\n"
            f"<b>–ü—Ä–æ–≤–µ—Ä–µ–Ω:</b> {verified}"
        )
        
        await cq.message.edit_text(proxy_text, reply_markup=kb_proxy(), parse_mode="HTML")
    
    await state.clear()
    await cq.answer()

@router.message(StateFilter(SearchStates.waiting_for_stop_id))
async def handle_stop_search(message: Message, state: FSMContext):
    try:
        search_id = int(message.text.strip())
    except ValueError:
        await message.reply("–ù–µ–æ–±—Ö–æ–¥–∏–º–æ —É–∫–∞–∑–∞—Ç—å —á–∏—Å–ª–æ–≤–æ–π ID –ø–æ–∏—Å–∫–∞.")
        await state.clear()
        await bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –ù–∞ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())
        return
    
    rows = DB.list_active_searches(message.from_user.id)
    search_exists = any(row[0] == search_id for row in rows)
    
    if not search_exists:
        await message.reply(f"–ü–æ–∏—Å–∫ #{search_id} –Ω–µ –Ω–∞–π–¥–µ–Ω –∏–ª–∏ –Ω–µ –ø—Ä–∏–Ω–∞–¥–ª–µ–∂–∏—Ç –≤–∞–º.")
        await state.clear()
        await bot.send_message(message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {message.from_user.first_name}! –ù–∞ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())
        return
    
    kb = InlineKeyboardBuilder()
    kb.button(text="–î–∞", callback_data=f"stop_confirm:yes:{search_id}")
    kb.button(text="–ù–µ—Ç", callback_data="stop_confirm:no:0")
    kb.adjust(2)
    
    await message.reply(f"–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–∏—Å–∫ #{search_id}?", reply_markup=kb.as_markup())
    await state.clear()

@router.callback_query(F.data.startswith("stop_confirm:"))
async def cb_stop_confirm(cq: CallbackQuery):
    parts = cq.data.split(":", 2)
    if len(parts) != 3:
        await cq.answer("–û—à–∏–±–∫–∞ –≤ –¥–∞–Ω–Ω—ã—Ö –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è")
        return
    
    _, action, sid_str = parts
    
    if action == "no":
        await cq.message.edit_text("–û—Ç–º–µ–Ω–∞ –æ—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–æ–∏—Å–∫–∞.")
        await cq.answer()
        await bot.send_message(cq.message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {cq.from_user.first_name}! –ù–∞ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())
        return
    
    try:
        sid = int(sid_str)
        
        if sid in ACTIVE:
            job = ACTIVE[sid]
            job.stop_event.set()
            
            stats_text = ""
            try:
                if job.total_new_ads > 0 or job.total_notified_ads > 0:
                    stats_text = (
                        f"\n\n<b>–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:</b>\n"
                        f"‚Ä¢ –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö –æ–±—ä—è–≤–ª–µ–Ω–∏–π: {job.total_new_ads}\n"
                        f"‚Ä¢ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–ø—Ä–æ—à–ª–∏ —Ñ–∏–ª—å—Ç—Ä—ã): {job.total_notified_ads}"
                    )
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏: {e}")
            
            with suppress(Exception):
                scheduler.remove_job(str(sid))
            
            DB.deactivate_search(sid)
            
            platform_name = job.platform.upper()
            await cq.message.edit_text(f"–ü–æ–∏—Å–∫ {platform_name} #{sid} –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.{stats_text}", parse_mode="HTML")
            await cq.answer()
        else:
            await cq.message.edit_text(f"–ü–æ–∏—Å–∫ #{sid} –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞—á–∞—Ö.")
            await cq.answer()
    except Exception as e:
        await cq.answer(f"–û—à–∏–±–∫–∞: {e}", show_alert=True)
    
    await bot.send_message(cq.message.chat.id, f"–ó–¥—Ä–∞–≤—Å—Ç–≤—É–π—Ç–µ, {cq.from_user.first_name}! –ù–∞ —á—Ç–æ –∂–µ–ª–∞–µ—Ç–µ –ø–æ–æ—Ö–æ—Ç–∏—Ç—å—Å—è —Å–µ–≥–æ–¥–Ω—è?", reply_markup=kb_main())

async def run_avito(job: SearchJob):
    s = job.settings
    parser = AvitoParse(
        url=job.urls,
        count=s["pages"],
        proxy=s["proxy"],
        proxy_change_url=s.get("proxy_change_url"),  # –î–æ–±–∞–≤–ª—è–µ–º URL —Å–º–µ–Ω—ã IP
        min_price=s["min_price"],
        max_price=s["max_price"],
        keysword_list=s["keywords"],
        keysword_black_list=s["blacklist"],
        max_views=0 if s["new_only"] else None,
        stop_event=job.stop_event,
        need_more_info=1,
        tg_token=TOKEN,
        chat_id=job.user_id,
        job_name=f"#{job.sid}" if not job.name else f"#{job.sid}-{job.name}",
        first_run=job.first_run
    )
    
    job.parser = parser
    
    await asyncio.get_running_loop().run_in_executor(None, parser.parse)
    
    if not job.first_run:
        stats = parser.get_statistics()
        job.total_new_ads += stats.get('total_new_ads', 0)
        job.total_notified_ads += stats.get('total_notified_ads', 0)
        logger.info(f"–ü–æ–∏—Å–∫ #{job.sid}: –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {job.total_new_ads}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {job.total_notified_ads}")

async def run_cian(job: SearchJob):
    s = job.settings
    parser = CianParse(
        url=job.urls,
        count=s.get("pages", 5),
        proxy=s.get("proxy"),
        proxy_change_url=s.get("proxy_change_url"),  # –ü–µ—Ä–µ–¥–∞–µ–º URL —Å–º–µ–Ω—ã IP
        min_price=s.get("min_price", 0),
        max_price=s.get("max_price", 9_999_999),
        keysword_list=s.get("keywords", []),
        keysword_black_list=s.get("blacklist", []),
        pause=s.get("pause", 300),
        stop_event=job.stop_event,
        tg_token=TOKEN,
        chat_id=job.user_id,
        job_name=f"#{job.sid}" if not job.name else f"#{job.sid}-{job.name}",
        first_run=job.first_run
    )
    
    job.parser = parser
    
    await asyncio.get_running_loop().run_in_executor(None, parser.parse)
    
    if not job.first_run:
        stats = parser.get_statistics()
        job.total_new_ads += stats.get('total_new_ads', 0)
        job.total_notified_ads += stats.get('total_notified_ads', 0)
        logger.info(f"–ü–æ–∏—Å–∫ –¶–ò–ê–ù #{job.sid}: –æ–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞. –í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ: {job.total_new_ads}, –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ: {job.total_notified_ads}")

async def _restore():
    for row in DB.list_active_searches():
        sid = row[0]
        urls = row[1].split()
        st = json.loads(row[2])
        
        platform = st.get('platform', 'avito')
        
        name = row[3] if len(row) > 3 else ""
        
        ev = asyncio.Event()
        ACTIVE[sid] = SearchJob(sid, 0, platform, urls, st, ev, first_run=False, name=name)
        
        if platform == "cian":
            scheduler.add_job(run_cian, "interval", seconds=st.get("pause", 300), args=[ACTIVE[sid]], id=str(sid))
        else:
            scheduler.add_job(run_avito, "interval", seconds=st.get("pause", 120), args=[ACTIVE[sid]], id=str(sid))

async def main():
    DB.clean_scan_history()
    DB.clean_cian_scan_history()
    DB.clean_cian_viewed()
    DB.clean_active_searches()
    
    success = DB.reset_search_counter()
    if success:
        logger.info("–°—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤ —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω –¥–æ 1")
    else:
        logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å —Å–±—Ä–æ—Å–∏—Ç—å —Å—á–µ—Ç—á–∏–∫ –ø–æ–∏—Å–∫–æ–≤")
    
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    asyncio.run(main())